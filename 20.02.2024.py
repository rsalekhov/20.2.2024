import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from config import DATABASE_CONFIG, TELEGRAM_TOKEN
import psycopg2

print('Start telegram bot...')

state_storage = StateMemoryStorage()
bot = TeleBot(TELEGRAM_TOKEN, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []

conn = psycopg2.connect(**DATABASE_CONFIG)
cursor = conn.cursor()

def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

def get_random_word_from_db():
    cursor.execute("SELECT target_word, translate_word, other_words FROM words_table ORDER BY RANDOM() LIMIT 1;")
    result = cursor.fetchone()
    return result

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0

@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "Hello, stranger, let study English...")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    target_word, translate, others = get_random_word_from_db()
    target_word_btn = types.KeyboardButton(translate)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    buttons.append(target_word_btn)
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    userStep[cid] = 2

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_word)

def process_delete_word(message):
    cid = message.chat.id
    word_to_delete = message.text.strip()

    if word_to_delete:
        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target_word
        cursor.execute("""
            DELETE FROM user_words
            WHERE user_id = %s AND target_word = %s;
        """, (cid, word_to_delete))

        if cursor.rowcount > 0:
            conn.commit()
            print(f"Word '{word_to_delete}' deleted from the database.")
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, process_new_word)

def process_new_word(message):
    cid = message.chat.id
    new_word = message.text.strip()

    if new_word:
        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        cursor.execute("""
            INSERT INTO user_words (user_id, target_word, translate_word, other_words)
            VALUES (%s, %s, %s, %s);
        """, (cid, new_word, new_word, [new_word, new_word, new_word]))

        conn.commit()
        print("Word added to the database:", new_word)

        # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ª–æ–≤–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        bot.send_message(cid, "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–ª–æ–≤–æ. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.")

        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        create_cards(message)
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        translate_word = data['translate_word']
        others = data['other_words']

        if text == translate_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        elif text in others:
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{target_word}")
        else:
            hint = show_hint("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)



bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)